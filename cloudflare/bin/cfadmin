#!/bin/sh
eval 'if [ -x /usr/local/cpanel/3rdparty/bin/perl ]; then exec /usr/local/cpanel/3rdparty/bin/perl -x -- $0 ${1+"$@"}; else exec /usr/bin/perl -x $0 ${1+"$@"}; fi;'
  if 0;

#!/usr/bin/perl

package bin::cfadmin;

# Sanitize @INC
BEGIN {
    unshift @INC, '..';                  # jnk - FIXME: is this really needed
    unshift @INC, '/usr/local/cpanel';
    @INC = grep( !/(^\.|\.\.|\/\.+)/, @INC );
    @INC = grep( /^(\/usr\/lib\d*\/perl|\/usr\/local\/lib\d*\/perl|\/usr\/local\/cpanel|\/usr\/share\/perl)/, @INC );
}

use strict;
use Cpanel::Logger    ();
use Cpanel::DataStore ();
use Cpanel::LoadFile  ();
use Digest::MD5       ();
use Cpanel::AccessIds ();

use Cpanel::CloudFlare::Api();
use Cpanel::CloudFlare::Config();
use Cpanel::CloudFlare::Helper();
use Cpanel::CloudFlare::Host();
use Cpanel::CloudFlare::UserStore();

## Data::Dumper is only needed within debug mode
## Some hosts do not have this installed
if (Cpanel::CloudFlare::Config::is_debug_mode()) {
    use Data::Dumper;
}

my $logger = Cpanel::Logger->new();
my $cf_host_key_file	  = "/root/.cpanel/datastore/cf_api";
my $cf_data_file_name     = ".cpanel/datastore/cloudflare_data.yaml";
my $cf_old_data_file_name = "/usr/local/cpanel/etc/cloudflare_data.yaml";
my $cf_data_file;
my $cf_host_key;
my $cf_host_on_cloud_msg;
my $cf_global_data      = {};
my $DEFAULT_HOSTER_NAME = "your web hosting provider";


my $serializer_function    = __get_serializer_function();
my $json_load_function     = Cpanel::CloudFlare::Helper::__get_json_load_function();
my $json_loadfile_function = Cpanel::CloudFlare::Helper::__get_json_loadfile_function();

__PACKAGE__->run unless caller;

sub run {
    # Parse the arguments passed to the testadmin scripts via stdin
    my $theargs = <STDIN>;

    #unless ( $theargs =~ /^(\d+) ([A-Z]+) (\S+)/ ) {
    unless ( $theargs =~ /^(\d+) ([A-Za-z_]+) (\S+)/ ) {
        print STDERR "$0 : Syntax Mismatch\n";
        exit 1;
    }
    chomp($theargs);

    if (Cpanel::CloudFlare::Config::is_debug_mode()) {
        $logger->info($theargs);
    }

    my ( $uid, $action, @args ) = split( / /, $theargs );

    # Code used to ensure that the correct user is being run.
    my @getpwuid_result = getpwuid( int($uid) );
    my ( $user, $gid, $home ) = @getpwuid_result[ 0, 3, 7 ];

    my $cf_user_store = Cpanel::CloudFlare::UserStore->new("home_dir", $home, "user" , $user);

    $logger->info("Action: ".$action);

    my %temp = @args;

    my $temp_homedir_owner = ( stat($temp{"homedir"}) )[4];

    if ( defined($temp{"user"}) && $uid != getpwnam($temp{"user"}) ) {
        $logger->info("User mismatch. Bailing out.");
        die "User mismatch";
    }
    
    $logger->info("Homedir Owner: " . $temp_homedir_owner);

    if ( $uid == $temp_homedir_owner ) {
        $cf_data_file = $temp{"homedir"} . "/" . $cf_data_file_name;
    } else {
        die "Permissions mismatch.";
    }

    # This command hash contains all the logic for the actions to be run as root
    # to add a new escalated action, add a new key with a value of a coderef to this hash
    my %commands = (
        'user_create' => sub {
            my %OPTS = @args;

            my $query = {
                "act"              => "user_create",
                "cloudflare_email" => $OPTS{"email"},
                "cloudflare_pass"  => ( defined($OPTS{"password"}) && $OPTS{"password"} ) ? $OPTS{"password"} : crypt( int( rand(10000000) ), time ),
                "unique_id"        => Digest::MD5::md5_hex( $OPTS{"email"} . $cf_host_key ),
            };

            my $result = Cpanel::CloudFlare::Api::host_api_request($query);

            if ($result->{"result"} == "success" && defined($result->{"response"}->{"unique_id"})) {
                $logger->info( "Creating Cloudflare user for " . $OPTS{"email"} );
                $cf_global_data->{"cloudflare_email"} = $OPTS{"email"};
                $cf_global_data->{"cf_user_tokens"}->{ $OPTS{"user"} } = Digest::MD5::md5_hex( $OPTS{"email"} . $cf_host_key );
                $logger->info( "Making user token: " . $cf_global_data->{"cf_user_tokens"}->{ $OPTS{"user"} } );

                $cf_user_store->__verify_file_with_user();

                Cpanel::AccessIds::do_as_user( $OPTS{"user"}, sub { Cpanel::DataStore::store_ref( $cf_data_file , $cf_global_data); } );
            }

            $serializer_function->($result);
        },
        'user_lookup' => sub {
            my %OPTS = @args;

            if ( $cf_global_data->{"cf_user_tokens"}->{ $OPTS{"user"} } ) {
                if (Cpanel::CloudFlare::Config::is_debug_mode()) {
                    $logger->info("Using user token");
                }
                my $query = {
                    "act"       => "user_lookup",
                    "unique_id" => $cf_global_data->{"cf_user_tokens"}->{ $OPTS{"user"} },
                };

                my $result = Cpanel::CloudFlare::Api::host_api_request($query);
                $result->{"on_cloud_message"} = Cpanel::CloudFlare::Config::get_on_cloud_message();
                $logger->info($result);

                $serializer_function->($result);
            }
        },
        'zone_set' => sub {
            my %OPTS = @args;

            my $domain = "." . $OPTS{"zone_name"} . ".";
            my $subs   = $OPTS{"subdomains"};
            $subs =~ s/${domain}//g;

            ## Set up the zone_set args.
            my $query = {
                "act"        => "zone_set",
                "user_key"   => $OPTS{"user_key"},
                "zone_name"  => $OPTS{"zone_name"},
                "resolve_to" => Cpanel::CloudFlare::Config::get_host_prefix() . "." . $OPTS{"zone_name"},
                "subdomains" => $subs
            };

            if ( !$subs ) {
                $query->{"act"} = "zone_delete";
                $cf_global_data->{"cf_zones"}->{ $OPTS{"zone_name"} } = 0;
            }

            my $result = Cpanel::CloudFlare::Api::host_api_request($query);

            $serializer_function->($result);
        },
        'full_zone_set' => sub {
            my %OPTS = @args;

            ## Set up the zone_set args.
            my $query = {
                "act"        => "full_zone_set",
                "user_key"   => $OPTS{"user_key"},
                "zone_name"  => $OPTS{"zone_name"}
            };

            my $result = Cpanel::CloudFlare::Api::host_api_request($query);

            $serializer_function->($result);
        },
        'zone_delete' => sub {
            my %OPTS = @args;

            my $domain = "." . $OPTS{"zone_name"} . ".";

            ## Set up the zone_set args.
            my $query =  {
                "act"       => "zone_delete",
                "user_key"  => $OPTS{"user_key"},
                "zone_name" => $OPTS{"zone_name"}
            };

            my $result = Cpanel::CloudFlare::Api::host_api_request($query);

            $serializer_function->($result);
        }
    );

    # Verify that the command exists
    if ( !exists $commands{$action} ) {
        print "not a valid action: $action\n";
        exit 1;
    }

    # Code used to ensure that the correct user is being run.
    my @getpwuid_result = getpwuid( int($uid) );
    my ( $user, $gid, $home ) = @getpwuid_result[ 0, 3, 7 ];

    if ( $user eq 'root' || $user eq '' ) {
        print "Admin Binary called with invalid user\n";
        exit;
    }

    if ( !-e "/var/cpanel/users/$user" && $user ne 'cpanel' ) {
        print "Admin binary called with invalid user\n";
        exit;
    }

    # This is needed by the Cpanel::AdminBin module
    print ".\n";

    # Additional validation to make sure we are operating in the correct user
    if (!defined($temp{"homedir"}) && !defined($temp{"user"})) {
        exit;
    }

    if (defined($temp{"homedir"}) && ! $getpwuid_result[7] eq $temp{"homedir"} ) {
        exit;
    }

    if (defined($temp{"user"}) && ! $getpwuid_result[0] eq $temp{"user"} ) {
        exit;
    }

    # User has been verified, so let's load the data file
    $cf_global_data = $cf_user_store->__load_data_file();

    ## No use making a request without this
    if ( !CloudFlare_init() || !Cpanel::CloudFlare::Host::get_host_api_key()) {
        return [
            {
                "result" => "error",
                "msg"    => "Error retrieving host_key. Please contact the system administrator."
            }
        ];
    }

    # Execute the action in question
    $commands{$action}->(@args);    

    return;
}

########## BEGIN Internal Functions #########
sub CloudFlare_init {
    Cpanel::CloudFlare::Host::load();
    return 1;
}

sub __get_serializer_function {
    eval { local $SIG{'__DIE__'}; local $SIG{'__WARN__'}; require Cpanel::AdminBin::Serializer; };
    if ( $INC{'Cpanel/AdminBin/Serializer.pm'} ) {
        return (
            sub {
                my ($data) = @_;
                print Cpanel::AdminBin::Serializer::Dump($data);
            }
        );
    }

    if ( __get_current_version() > 11.35 ) {
        require Cpanel::YAML;
        return (
            sub {
                my ($data) = @_;
                print Cpanel::YAML::Dump($data);
            }
        );
    }

    require Storable;
    return (
        sub {
            my ($data) = @_;
            Storable::nstore_fd( $data, \*STDOUT );
        }
    );
}

sub __get_current_version {
    eval { local $SIG{'__DIE__'}; local $SIG{'__WARN__'}; require Cpanel::Version; };

    return $Cpanel::Version::MAJORVERSION if $Cpanel::Version::MAJORVERSION;

    my $current_version = Cpanel::LoadFile::loadfile('/usr/local/cpanel/version');

    if ( $current_version =~ m/^([0-9]+\.[0-9]+)/ ) {
        return $1;
    }

    return 'unknown';
}

########## END Internal Functions #########
