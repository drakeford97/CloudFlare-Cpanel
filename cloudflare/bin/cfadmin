#!/bin/sh
eval 'if [ -x /usr/local/cpanel/3rdparty/bin/perl ]; then exec /usr/local/cpanel/3rdparty/bin/perl -x -- $0 ${1+"$@"}; else exec /usr/bin/perl -x $0 ${1+"$@"}; fi;'
  if 0;

#!/usr/bin/perl

package bin::cfadmin;

# Sanitize @INC
BEGIN {
    unshift @INC, '..';                  # jnk - FIXME: is this really needed
    unshift @INC, '/usr/local/cpanel';
    @INC = grep( !/(^\.|\.\.|\/\.+)/, @INC );
    @INC = grep( /^(\/usr\/lib\d*\/perl|\/usr\/local\/lib\d*\/perl|\/usr\/local\/cpanel|\/usr\/share\/perl)/, @INC );
}

use strict;
use Cpanel::Logger    ();
use Cpanel::DataStore ();
use Cpanel::LoadFile  ();
use Socket            ();
use Digest::MD5       ();
use Cpanel::AccessIds ();

my $logger = Cpanel::Logger->new();
my $locale;
my $cf_config_file        = "/usr/local/cpanel/etc/cloudflare.json";
my $cf_host_key_file	  = "/root/.cpanel/datastore/cf_api";
my $cf_data_file_name     = ".cpanel/datastore/cloudflare_data.yaml";
my $cf_old_data_file_name = "/usr/local/cpanel/etc/cloudflare_data.yaml";
my $cf_data_file;
my $cf_host_key;
my $cf_host_name;
my $cf_host_uri;
my $cf_user_name;
my $cf_user_uri;
my $cf_host_port;
my $cf_host_on_cloud_msg;
my $cf_host_prefix;
my $has_ssl;
my $cf_debug_mode;
my $hoster_name;
my $cf_cp_version;
my $cf_global_data      = {};
my $DEFAULT_HOSTER_NAME = "your web hosting provider";


my $serializer_function    = __get_serializer_function();
my $json_load_function     = __get_json_load_function();
my $json_loadfile_function = __get_json_loadfile_function();

__PACKAGE__->run unless caller;

sub run {

    # Parse the arguments passed to the testadmin scripts via stdin
    my $theargs = <STDIN>;

    #unless ( $theargs =~ /^(\d+) ([A-Z]+) (\S+)/ ) {
    unless ( $theargs =~ /^(\d+) ([A-Za-z_]+) (\S+)/ ) {
        print STDERR "$0 : Syntax Mismatch\n";
        exit 1;
    }
    chomp($theargs);

    $logger->info($theargs);

    my ( $uid, $action, @args ) = split( / /, $theargs );

    $logger->info($action);

    my %temp = @args;

    my $temp_homedir_owner = ( stat($temp{"homedir"}) )[4];

    if ( defined($temp{"user"}) && $uid != getpwnam($temp{"user"}) ) {
        $logger->info("User mismatch. Bailing out.");
        die "User mismatch";
    }
    
    $logger->info("Homedir Owner: " . $temp_homedir_owner);

    if ( $uid == $temp_homedir_owner ) {
        $cf_data_file = $temp{"homedir"} . "/" . $cf_data_file_name;
    } else {
        die "Permissions mismatch.";
    }    
    
    # This command hash contains all the logic for the actions to be run as root
    # to add a new escalated action, add a new key with a value of a coderef to this hash
    my %commands = (
        'user_create' => sub {
            my %OPTS = @args;

            # This is the one case where we need to do __load_data_file among other things, because of the
            # host_key salt with the user token.
            __load_data_file( $OPTS{"homedir"} , $OPTS{"user"} );

            # Use a random string as a password.
            $logger->info( "Creating Cloudflare user for " . $OPTS{"email"} );
            $cf_global_data->{"cloudflare_email"} = $OPTS{"email"};
            $cf_global_data->{"cf_user_tokens"}->{ $OPTS{"user"} } = Digest::MD5::md5_hex( $OPTS{"email"} . $cf_host_key );
            $logger->info( "Making user token: " . $cf_global_data->{"cf_user_tokens"}->{ $OPTS{"user"} } );

            __verify_file_with_user($OPTS{"user"});

            Cpanel::AccessIds::do_as_user( $OPTS{"user"}, sub { Cpanel::DataStore::store_ref( $cf_data_file , $cf_global_data); } );

            ## Otherwise, try to create this user.
            my $query = {
                "act"              => "user_create",
                "cloudflare_email" => $OPTS{"email"},
                "cloudflare_pass"  => ( defined($OPTS{"password"}) && $OPTS{"password"} ) ? $OPTS{"password"} : crypt( int( rand(10000000) ), time ),
                "unique_id"        => Digest::MD5::md5_hex( $OPTS{"email"} . $cf_host_key ),
            };

            my $result = __https_post_req->($query);
            $result = $json_load_function->($result);

            $serializer_function->($result);
        },
        'user_lookup' => sub {
            my %OPTS = @args;

            __load_data_file( $OPTS{"homedir"} , $OPTS{"user"} );

            if ( $cf_global_data->{"cf_user_tokens"}->{ $OPTS{"user"} } ) {
                if ($cf_debug_mode) {
                    $logger->info("Using user token");
                }
                my $query = {
                    "act"       => "user_lookup",
                    "unique_id" => $cf_global_data->{"cf_user_tokens"}->{ $OPTS{"user"} },
                };

                my $result = $json_load_function->( __https_post_req->($query) );
                $result->{"on_cloud_message"} = $cf_host_on_cloud_msg;
                $logger->info($result);

                $serializer_function->($result);
            } else {
                if ($cf_debug_mode) {
                    $logger->info("Using user email");
                }
                my $query = {
                    "act"              => "user_lookup",
                    "cloudflare_email" => $cf_global_data->{"cloudflare_email"},
                };

                my $result = $json_load_function->( __https_post_req->($query) );
                $result->{"on_cloud_message"} = $cf_host_on_cloud_msg;

                $serializer_function->($result);
            }
        },
        'zone_set' => sub {
            my %OPTS = @args;

            __load_data_file( $OPTS{"homedir"} , (getpwuid($uid))[0] );
            my $domain = "." . $OPTS{"zone_name"} . ".";
            my $subs   = $OPTS{"subdomains"};
            $subs =~ s/${domain}//g;

            ## Set up the zone_set args.
            my $query = {
                "act"        => "zone_set",
                "user_key"   => $OPTS{"user_key"},
                "zone_name"  => $OPTS{"zone_name"},
                "resolve_to" => $cf_host_prefix . "." . $OPTS{"zone_name"},
                "subdomains" => $subs
            };

            if ( !$subs ) {
                $query->{"act"} = "zone_delete";
                $cf_global_data->{"cf_zones"}->{ $OPTS{"zone_name"} } = 0;
            }

            my $result = $json_load_function->( __https_post_req->($query) );

            $serializer_function->($result);
        },
        'zone_delete' => sub {
            my %OPTS = @args;

            __load_data_file( $OPTS{"homedir"} , (getpwuid($uid))[0] );
            my $domain = "." . $OPTS{"zone_name"} . ".";

            ## Set up the zone_set args.
            my $query =  {
                "act"       => "zone_delete",
                "user_key"  => $OPTS{"user_key"},
                "zone_name" => $OPTS{"zone_name"}
            };

            my $result = $json_load_function->( __https_post_req->($query) );

            $serializer_function->($result);
        }
    );

    # Verify that the command exists
    if ( !exists $commands{$action} ) {
        print "not a valid action: $action\n";
        exit 1;
    }

    # Code used to ensure that the correct user is being run.
    my @getpwuid_result = getpwuid( int($uid) );
    my ( $user, $gid, $home ) = @getpwuid_result[ 0, 3, 7 ];

    if ( $user eq 'root' || $user eq '' ) {
        print "Admin Binary called with invalid user\n";
        exit;
    }

    if ( !-e "/var/cpanel/users/$user" && $user ne 'cpanel' ) {
        print "Admin binary called with invalid user\n";
        exit;
    }

    # This is needed by the Cpanel::AdminBin module
    print ".\n";

    # Additional validation to make sure we are operating in the correct user
    if (!defined($temp{"homedir"}) && !defined($temp{"user"})) {
        exit;
    }

    if (defined($temp{"homedir"}) && ! $getpwuid_result[7] eq $temp{"homedir"} ) {
        exit;
    }

    if (defined($temp{"user"}) && ! $getpwuid_result[0] eq $temp{"user"} ) {
        exit;
    }

    if (!CloudFlare_init()) {
        return [
            {
                "result" => "error",
                "msg"    => "CloudFlare is disabled until Net::SSLeay is installed on this server."
            }
        ];
    }

    if ( !$cf_host_key || !$cf_host_prefix ) {
        $logger->info("Missing cf_host_key or $cf_host_prefix! Define these in $cf_host_key_file and $cf_config_file.");
        return [];
    }

    # Execute the action in question

    $commands{$action}->(@args);    

    return;
}

########## BEGIN Internal Functions #########
sub CloudFlare_init {
    my $data = $json_loadfile_function->($cf_config_file);

    $cf_host_name         = $data->{"host_name"};
    $cf_host_uri          = $data->{"host_uri"};
    $cf_host_port         = $data->{"host_port"};
    $cf_host_prefix       = $data->{"host_prefix"};
    $cf_debug_mode        = $data->{"debug"};
    $cf_user_name         = $data->{"user_name"};
    $cf_user_uri          = $data->{"user_uri"};
    $cf_cp_version        = $data->{"cp_version"};
    $hoster_name          = $data->{"host_formal_name"};
    $cf_host_on_cloud_msg = ( $data->{"cloudflare_on_message"} ) ? $data->{"cloudflare_on_message"} : "";
    if ( !$hoster_name ) {
        $hoster_name = $DEFAULT_HOSTER_NAME;
    }

    eval { local $SIG{'__DIE__'}; local $SIG{'__WARN__'}; require Net::SSLeay; $has_ssl = 1; };
    if ( !$has_ssl ) {
        $logger->warn("Failed to load Net::SSLeay: $@.\nDisabling functionality until fixed.");
        return 0;
    }

    my $file     = "/root/.cpanel/datastore/cf_api";
    my $response = "";
    $response = Cpanel::LoadFile::loadfile($file);
    $response =~ s/\n//;
    $cf_host_key = $response;

    return 1;
}

sub __load_data_file {
    my $home_dir = shift;
    my $user     = shift;
 
    __verify_file_with_user($user);

    if ( Cpanel::DataStore::load_ref( $cf_data_file, $cf_global_data ) ) {
        if ($cf_debug_mode) {
            $logger->info("Successfully loaded cf data -- $cf_data_file");
        }
    } else {
        ## Try to load the data from the old default data file (if it exists)
        if ( -e $cf_old_data_file_name ) {
            $logger->info("Failed to load cf data -- Trying to copy from $cf_old_data_file_name for $user");
            my $tmp_data = {};
            Cpanel::DataStore::load_ref( $cf_old_data_file_name, $tmp_data );
            $cf_global_data->{"cf_user_tokens"}->{$user} = $tmp_data->{"cf_user_tokens"}->{$user};
            $cf_global_data->{"cf_zones"} = $tmp_data->{"cf_zones"};
        }
        else {
            $cf_global_data = { "cf_zones" => {} };
            $logger->info("Failed to load cf data -- storing blank data at $cf_data_file");
        }

        Cpanel::AccessIds::do_as_user( $user, sub { Cpanel::DataStore::store_ref($cf_data_file, $cf_global_data); } );
    }

    return 1;
}

sub __verify_file_with_user{
    my $user = shift;

    if ( -l $cf_data_file ) {
        $logger->info("Symlink found. Removing cloudflare_data.yaml.");
        unlink($cf_data_file);
    }

    my $temp_uid = (getpwnam($user))[2];

    my $inode = (stat($cf_data_file))[4];
    $logger->info($inode);
    $logger->info($temp_uid);

    if ( $inode != (getpwnam($user))[2] ) {
        if ( -e $cf_data_file ) {
            $logger->info("Permisisons incorrect on inode. Removing cloudflare_data.yaml");
            unlink($cf_data_file);
        } else {
            $logger->info("cloudflare_data.yaml does not exist.");
        }
    }
}

sub __https_post_req {
    my ($query) = @_;

    # Use standard host, uri, and port
    my $args_hr = {
        "host"  => $cf_host_name,
        "uri"   => $cf_host_uri,
        "port"  => $cf_host_port,
        "query" => $query
    };

    # Add host_key to all queries
    $args_hr->{'query'}->{'host_key'} = $cf_host_key;

    if ( $args_hr->{'port'} ne "443" ) {
        die "POST request not defined to be Port 443, this should not happen.";
    }

    my $headers = Net::SSLeay::make_headers(
        'CF-Integration' => 'cpanel',
        'CF-Integration-Version' => $cf_cp_version
    );
    my ( $page, $response, %reply_headers ) = Net::SSLeay::post_https(
        $args_hr->{'host'}, $args_hr->{'port'}, $args_hr->{'uri'},
        $headers,
        Net::SSLeay::make_form( %{ $args_hr->{'query'} } )
    );
    if ($cf_debug_mode) {
        $logger->info($response);
        $logger->info($page);
    }
    return $page;
}

sub __get_serializer_function {
    eval { local $SIG{'__DIE__'}; local $SIG{'__WARN__'}; require Cpanel::AdminBin::Serializer; };
    if ( $INC{'Cpanel/AdminBin/Serializer.pm'} ) {
        return (
            sub {
                my ($data) = @_;
                print Cpanel::AdminBin::Serializer::Dump($data);
            }
        );
    }

    if ( __get_current_version() > 11.35 ) {
        require Cpanel::YAML;
        return (
            sub {
                my ($data) = @_;
                print Cpanel::YAML::Dump($data);
            }
        );
    }

    require Storable;
    return (
        sub {
            my ($data) = @_;
            Storable::nstore_fd( $data, \*STDOUT );
        }
    );
}

sub __get_current_version {
    eval { local $SIG{'__DIE__'}; local $SIG{'__WARN__'}; require Cpanel::Version; };

    return $Cpanel::Version::MAJORVERSION if $Cpanel::Version::MAJORVERSION;

    my $current_version = Cpanel::LoadFile::loadfile('/usr/local/cpanel/version');

    if ( $current_version =~ m/^([0-9]+\.[0-9]+)/ ) {
        return $1;
    }

    return 'unknown';
}

sub __get_json_load_function {
    eval { local $SIG{'__DIE__'}; local $SIG{'__WARN__'}; require Cpanel::JSON; };
    if ( $INC{'Cpanel/JSON.pm'} ) {
        return \&Cpanel::JSON::Load;
    }
    eval { local $SIG{'__DIE__'}; local $SIG{'__WARN__'}; require JSON::Syck; };
    if ( $INC{'JSON/Syck.pm'} ) {
        return \&JSON::Syck::Load;
    }
    die "Failed to find JSON load funcition";
}

sub __get_json_loadfile_function {
    eval { local $SIG{'__DIE__'}; local $SIG{'__WARN__'}; require Cpanel::JSON; };
    if ( $INC{'Cpanel/JSON.pm'} && 'Cpanel::JSON'->can('LoadFile') ) {
        return \&Cpanel::JSON::LoadFile;
    }
    eval { local $SIG{'__DIE__'}; local $SIG{'__WARN__'}; require JSON::Syck; };
    if ( $INC{'JSON/Syck.pm'} ) {
        return \&JSON::Syck::LoadFile;
    }
    die "Failed to find JSON load funcition";
}

########## END Internal Functions #########
